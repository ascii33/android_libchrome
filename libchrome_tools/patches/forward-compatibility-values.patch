From 820df360842483e376a1d9c54a23fc944b6dd976 Mon Sep 17 00:00:00 2001
From: hscham <hscham@chromium.org>
Date: Wed, 9 Sep 2020 10:01:33 +0900
Subject: [PATCH] Support base::Value::{TakeList,Append,EraseListIter}

Change-Id: Ide84c1bb8bb0a47c828cf0c1b3082e26f6de82f5
---
 base/values.cc | 14 ++++++++++++++
 base/values.h  |  8 ++++++++
 2 files changed, 22 insertions(+)

diff --git a/base/values.cc b/base/values.cc
index 6509f3df2d..8f44c957d3 100644
--- a/base/values.cc
+++ b/base/values.cc
@@ -336,6 +336,20 @@ const Value::ListStorage& Value::GetList() const {
   return list_;
 }
 
+void Value::Append(Value&& value) {
+  CHECK(is_list());
+  GetList().push_back(std::move(value));
+}
+
+bool Value::EraseListIter(ListStorage::const_iterator iter) {
+  CHECK(is_list());
+  if (iter == list_.end())
+    return false;
+
+  list_.erase(iter);
+  return true;
+}
+
 Value* Value::FindKey(StringPiece key) {
   return const_cast<Value*>(static_cast<const Value*>(this)->FindKey(key));
 }
index a3b87baaf8..9d6331a084 100644
--- a/base/values.h
+++ b/base/values.h
@@ -176,6 +176,14 @@ class BASE_EXPORT Value {
 
   ListStorage& GetList();
   const ListStorage& GetList() const;
+  inline ListStorage TakeList() { return std::move(GetList()); }
+
+  void Append(Value&& value);
+
+  // Erases the Value pointed to by |iter|. Returns false if |iter| is out of
+  // bounds.
+  // Note: This CHECKs that type() is Type::LIST.
+  bool EraseListIter(ListStorage::const_iterator iter);
 
   // |FindKey| looks up |key| in the underlying dictionary. If found, it returns
   // a pointer to the element. Otherwise it returns nullptr.
-- 
2.28.0.526.ge36021eeef-goog

