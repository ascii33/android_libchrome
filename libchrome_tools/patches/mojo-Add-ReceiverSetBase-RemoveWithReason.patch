From 1d90d9ca88ba9c5d275999b459b28400aee9c12d Mon Sep 17 00:00:00 2001
From: Harvey Yang <chenghaoyang@chromium.org>
Date: Mon, 16 Aug 2021 02:28:42 -0700
Subject: [PATCH 2/2] mojo: Add ReceiverSetBase::RemoveWithReason

To support removing a receiver in ReceiverSet with reason, like
Receiver::ResetWithReason, adds ReceiverSetBase::RemoveWithReason().

BUG=chromium:1239129
TEST=builds

Change-Id: I59e2cb53bd98f92fef9f07bd95f06abf3a8e443d
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3088885
Reviewed-by: Ken Rockot <rockot@google.com>
Commit-Queue: Cheng-Hao Yang <chenghaoyang@chromium.org>
Cr-Commit-Position: refs/heads/master@{#912107}


CrOS-Libchrome-Original-Commit: 4f7131425b5274aea8c0b6d430aa34663433809b
---
 mojo/public/cpp/bindings/receiver_set.cc | 11 +++++++++++
 mojo/public/cpp/bindings/receiver_set.h  | 24 ++++++++++++++++++++++++
 2 files changed, 35 insertions(+)

diff --git a/mojo/public/cpp/bindings/receiver_set.cc b/mojo/public/cpp/bindings/receiver_set.cc
index bd764bea0..644937c56 100644
--- a/mojo/public/cpp/bindings/receiver_set.cc
+++ b/mojo/public/cpp/bindings/receiver_set.cc
@@ -101,6 +101,17 @@ bool ReceiverSetState::Remove(ReceiverId id) {
   return true;
 }
 
+bool ReceiverSetState::RemoveWithReason(ReceiverId id,
+                                        uint32_t custom_reason_code,
+                                        const std::string& description) {
+  auto it = entries_.find(id);
+  if (it == entries_.end())
+    return false;
+  it->second->receiver().ResetWithReason(custom_reason_code, description);
+  entries_.erase(it);
+  return true;
+}
+
 void ReceiverSetState::FlushForTesting() {
   // We avoid flushing while iterating over |entries_| because this set may be
   // mutated during individual flush operations.  Instead, snapshot the
diff --git a/mojo/public/cpp/bindings/receiver_set.h b/mojo/public/cpp/bindings/receiver_set.h
index ca06a766b..842c10222 100644
--- a/mojo/public/cpp/bindings/receiver_set.h
+++ b/mojo/public/cpp/bindings/receiver_set.h
@@ -65,6 +65,8 @@ class COMPONENT_EXPORT(MOJO_CPP_BINDINGS) ReceiverSetState {
         std::unique_ptr<MessageFilter> filter,
         RepeatingConnectionErrorWithReasonCallback disconnect_handler) = 0;
     virtual void FlushForTesting() = 0;
+    virtual void ResetWithReason(uint32_t custom_reason_code,
+                                 const std::string& description) = 0;
   };
 
   class COMPONENT_EXPORT(MOJO_CPP_BINDINGS) Entry {
@@ -115,6 +117,9 @@ class COMPONENT_EXPORT(MOJO_CPP_BINDINGS) ReceiverSetState {
   ReportBadMessageCallback GetBadMessageCallback();
   ReceiverId Add(std::unique_ptr<ReceiverState> receiver);
   bool Remove(ReceiverId id);
+  bool RemoveWithReason(ReceiverId id,
+                        uint32_t custom_reason_code,
+                        const std::string& description);
   void FlushForTesting();
   void SetDispatchContext(const void* context, ReceiverId receiver_id);
   void OnDisconnect(ReceiverId id,
@@ -231,6 +236,12 @@ class ReceiverSetBase {
   // disconnected. No further messages or disconnection notifications will be
   // scheduled or executed for the removed receiver.
   bool Remove(ReceiverId id) { return state_.Remove(id); }
+  // Similar to the method above, but also specifies a disconnect reason.
+  bool RemoveWithReason(ReceiverId id,
+                        uint32_t custom_reason_code,
+                        const std::string& description) {
+    return state_.RemoveWithReason(id, custom_reason_code, description);
+  }
 
   // Unbinds and takes all receivers in this set.
   std::vector<PendingType> TakeReceivers() {
@@ -249,6 +260,14 @@ class ReceiverSetBase {
   // ReceiverSet will not schedule or execute any further method invocations or
   // disconnection notifications until a new receiver is added to the set.
   void Clear() { state_.entries().clear(); }
+  // Similar to the method above, but also specifies a disconnect reason.
+  void ClearWithReason(uint32_t custom_reason_code,
+                       const std::string& description) {
+    for (auto& entry : state_.entries())
+      entry.second->receiver().ResetWithReason(custom_reason_code, description);
+
+    Clear();
+  }
 
   // Predicate to test if a receiver exists in the set.
   //
@@ -354,6 +373,11 @@ class ReceiverSetBase {
 
     void FlushForTesting() override { receiver_.FlushForTesting(); }
 
+    void ResetWithReason(uint32_t custom_reason_code,
+                         const std::string& description) override {
+      receiver_.ResetWithReason(custom_reason_code, description);
+    }
+
     ImplPointerType SwapImplForTesting(ImplPointerType new_impl) {
       return receiver_.SwapImplForTesting(new_impl);
     }
-- 
2.31.0

