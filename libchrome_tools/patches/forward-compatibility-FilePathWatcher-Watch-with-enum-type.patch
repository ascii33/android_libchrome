From 0ad79154ea9c739b1fd2ecf500b857c3a8702227 Mon Sep 17 00:00:00 2001
From: hscham <hscham@chromium.org>
Date: Mon, 8 Mar 2021 20:34:41 +0900
Subject: [PATCH] Add base::FilePathWatcher::Watch with enum type

Change-Id: I5540d018d85a20d6f0ebf14be96d08d306be9fd8
---
 base/files/file_path_watcher.h | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/base/files/file_path_watcher.h b/base/files/file_path_watcher.h
index 0289334ba6..6303f0f1fb 100644
--- a/base/files/file_path_watcher.h
+++ b/base/files/file_path_watcher.h
@@ -32,6 +32,19 @@ namespace base {
 // Must be destroyed on the sequence that invokes Watch().
 class BASE_EXPORT FilePathWatcher {
  public:
+  enum class Type {
+    // Indicates that the watcher should watch the given path and its
+    // ancestors for changes. If the path does not exist, its ancestors will
+    // be watched in anticipation of it appearing later. If the path names a
+    // directory, changes within the directory are not watched.
+    kNonRecursive,
+
+    // Indicates that the watcher should watch the given path, its ancestors,
+    // and its descendants for changes. If the path names a directory, changes
+    // within the directory are watched.
+    kRecursive,
+  };
+
   // Callback type for Watch(). |path| points to the file that was updated,
   // and |error| is true if the platform specific code detected an error. In
   // that case, the callback won't be invoked again.
@@ -41,6 +54,8 @@ class BASE_EXPORT FilePathWatcher {
   // Used internally to encapsulate different members on different platforms.
   class PlatformDelegate {
    public:
+    using Type = FilePathWatcher::Type;
+
     PlatformDelegate();
     virtual ~PlatformDelegate();
 
@@ -48,6 +63,11 @@ class BASE_EXPORT FilePathWatcher {
     virtual bool Watch(const FilePath& path,
                        bool recursive,
                        const Callback& callback) WARN_UNUSED_RESULT = 0;
+    inline bool Watch(const FilePath& path,
+                       Type type,
+                       const Callback& callback) {
+      return Watch(path, type == Type::kRecursive, callback);
+    }
 
     // Stop watching. This is called from FilePathWatcher's dtor in order to
     // allow to shut down properly while the object is still alive.
-- 
2.30.1.766.gb4fecdf3b7-goog

