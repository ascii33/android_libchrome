From 8f9e1132cde98de3a4ef16e31cd3b4672acf4ec3 Mon Sep 17 00:00:00 2001
From: hscham <hscham@chromium.org>
Date: Mon, 8 Mar 2021 20:34:41 +0900
Subject: [PATCH] Add base::FilePathWatcher::Watch with enum type

Change-Id: I5540d018d85a20d6f0ebf14be96d08d306be9fd8
---
 base/files/file_path_watcher.cc |  7 +++++++
 base/files/file_path_watcher.h  | 16 ++++++++++++++++
 2 files changed, 23 insertions(+)

diff --git a/base/files/file_path_watcher.cc b/base/files/file_path_watcher.cc
index 7b424827e0..b62a6cd5f1 100644
--- a/base/files/file_path_watcher.cc
+++ b/base/files/file_path_watcher.cc
@@ -43,4 +43,11 @@ bool FilePathWatcher::Watch(const FilePath& path,
   return impl_->Watch(path, recursive, callback);
 }
 
+bool FilePathWatcher::Watch(const FilePath& path,
+                            Type type,
+                            const Callback& callback) {
+  DCHECK(sequence_checker_.CalledOnValidSequence());
+  DCHECK(path.IsAbsolute());
+  return impl_->Watch(path, type == Type::kRecursive, callback);
+}
 }  // namespace base
diff --git a/base/files/file_path_watcher.h b/base/files/file_path_watcher.h
index 0289334ba6..ff00852164 100644
--- a/base/files/file_path_watcher.h
+++ b/base/files/file_path_watcher.h
@@ -32,6 +32,19 @@ namespace base {
 // Must be destroyed on the sequence that invokes Watch().
 class BASE_EXPORT FilePathWatcher {
  public:
+  enum class Type {
+    // Indicates that the watcher should watch the given path and its
+    // ancestors for changes. If the path does not exist, its ancestors will
+    // be watched in anticipation of it appearing later. If the path names a
+    // directory, changes within the directory are not watched.
+    kNonRecursive,
+
+    // Indicates that the watcher should watch the given path, its ancestors,
+    // and its descendants for changes. If the path names a directory, changes
+    // within the directory are watched.
+    kRecursive,
+  };
+
   // Callback type for Watch(). |path| points to the file that was updated,
   // and |error| is true if the platform specific code detected an error. In
   // that case, the callback won't be invoked again.
@@ -41,6 +54,8 @@ class BASE_EXPORT FilePathWatcher {
   // Used internally to encapsulate different members on different platforms.
   class PlatformDelegate {
    public:
+    using Type = FilePathWatcher::Type;
+
     PlatformDelegate();
     virtual ~PlatformDelegate();
 
@@ -97,6 +112,7 @@ class BASE_EXPORT FilePathWatcher {
   // Recursive watch is not supported on all platforms and file systems.
   // Watch() will return false in the case of failure.
   bool Watch(const FilePath& path, bool recursive, const Callback& callback);
+  bool Watch(const FilePath& path, Type type, const Callback& callback);
 
  private:
   std::unique_ptr<PlatformDelegate> impl_;
-- 
2.31.0.rc2.261.g7f71774620-goog

