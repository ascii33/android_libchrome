From ccec05c6f14086fee0521ab8403aac8aab125eee Mon Sep 17 00:00:00 2001
From: hscham <hscham@chromium.org>
Date: Fri, 11 Jun 2021 16:08:40 +0900
Subject: [PATCH] Add 2-param base::{WatchFileDescriptor,AppendToFile}

To replace the deprecated 3-param variants.

Change-Id: I5e242b15fcb0a5288e801302485fcd7cb74b0515
---
 base/files/file_util.h        | 11 +++++++++++
 base/files/file_util_posix.cc | 19 +++++++++++++++++++
 2 files changed, 30 insertions(+)

diff --git a/base/files/file_util.h b/base/files/file_util.h
index fb6e654a4da3..3f764b9ea42a 100644
--- a/base/files/file_util.h
+++ b/base/files/file_util.h
@@ -458,6 +458,14 @@ BASE_EXPORT bool WriteFile(const FilePath& filename, StringPiece data);
 // |size| bytes of |data| were written to |fd|.
 BASE_EXPORT bool WriteFileDescriptor(const int fd, const char* data, int size);
 
+// Appends |data| to |fd|. Does not close |fd| when done.  Returns true iff all
+// of |data| were written to |fd|.
+BASE_EXPORT bool WriteFileDescriptor(int fd, span<const uint8_t> data);
+
+// WriteFileDescriptor() variant that takes a StringPiece so callers don't have
+// to do manual conversions from a char span to a uint8_t span.
+BASE_EXPORT bool WriteFileDescriptor(int fd, StringPiece data);
+
 // Allocates disk space for the file referred to by |fd| for the byte range
 // starting at |offset| and continuing for |size| bytes. The file size will be
 // changed if |offset|+|len| is greater than the file size. Zeros will fill the
@@ -472,6 +480,9 @@ BASE_EXPORT bool AllocateFileRegion(File* file, int64_t offset, size_t size);
 BASE_EXPORT bool AppendToFile(const FilePath& filename,
                               const char* data,
                               int size);
+BASE_EXPORT bool AppendToFile(const FilePath& filename,
+                              span<const uint8_t> data);
+BASE_EXPORT bool AppendToFile(const FilePath& filename, StringPiece data);
 
 // Gets the current working directory for the process.
 BASE_EXPORT bool GetCurrentDirectory(FilePath* path);
diff --git a/base/files/file_util_posix.cc b/base/files/file_util_posix.cc
index e307f385147d..8118d143ba56 100644
--- a/base/files/file_util_posix.cc
+++ b/base/files/file_util_posix.cc
@@ -904,6 +904,15 @@ bool WriteFileDescriptor(const int fd, const char* data, int size) {
   return true;
 }
 
+bool WriteFileDescriptor(int fd, span<const uint8_t> data) {
+  return WriteFileDescriptor(
+      fd, reinterpret_cast<const char*>(data.data()), data.size());
+}
+
+bool WriteFileDescriptor(int fd, StringPiece data) {
+  return WriteFileDescriptor(fd, data.data(), data.size());
+}
+
 bool AllocateFileRegion(File* file, int64_t offset, size_t size) {
   DCHECK(file);
 
@@ -1001,6 +1010,16 @@ bool AppendToFile(const FilePath& filename, const char* data, int size) {
   return ret;
 }
 
+bool AppendToFile(const FilePath& filename, span<const uint8_t> data) {
+    return AppendToFile(
+        filename,
+        StringPiece(reinterpret_cast<const char*>(data.data()), data.size()));
+}
+
+bool AppendToFile(const FilePath& filename, StringPiece data) {
+  return AppendToFile(filename, data.data(), data.size());
+}
+
 bool GetCurrentDirectory(FilePath* dir) {
   // getcwd can return ENOENT, which implies it checks against the disk.
   ScopedBlockingCall scoped_blocking_call(FROM_HERE, BlockingType::MAY_BLOCK);
-- 
2.32.0.272.g935e593368-goog

